use crate::ast::*;
use string_cache::DefaultAtom;

grammar;

pub Program: Program = {
    Items => Program { items: <> }
};

Items: Vec<Item> = {
    Item* => <>.into_iter().filter_map(|v| v).collect()
};

Item: Option<Item> = {
    Comment => None,
    StructDefn => Some(Item::StructDefn(<>)),
    TraitDefn => Some(Item::TraitDefn(<>)),
    Impl => Some(Item::Impl(<>)),
    Clause => Some(Item::Clause(<>)),
};

Comment: () = r"//.*";

pub Goal: Box<Goal> = {
    Goal1,
    <g1:Goal1> "," <g2:Goal> => Box::new(Goal::And(g1, g2)),
};

Goal1: Box<Goal> = {
    "forall" "<" <p:Comma<ParameterKind>> ">" "{" <g:Goal> "}" => Box::new(Goal::ForAll(p, g)),
    "exists" "<" <p:Comma<ParameterKind>> ">" "{" <g:Goal> "}" => Box::new(Goal::Exists(p, g)),
    "if" "(" <h:SemiColon<InlineClause>> ")" "{" <g:Goal> "}" => Box::new(Goal::Implies(h, g)),
    "not" "{" <g:Goal> "}" => Box::new(Goal::Not(g)),
    "compatible" "{" <g:Goal> "}" => Box::new(Goal::Compatible(g)),
    <leaf:LeafGoal> => Box::new(Goal::Leaf(leaf)),
    "(" <Goal> ")",
};

UpstreamKeyword: () = "#" "[" "upstream" "]";
AutoKeyword: () = "#" "[" "auto" "]";
MarkerKeyword: () = "#" "[" "marker" "]";
FundamentalKeyword: () = "#" "[" "fundamental" "]";
NonEnumerableKeyword: () = "#" "[" "non_enumerable" "]";
CoinductiveKeyword: () = "#" "[" "coinductive" "]";

StructDefn: StructDefn = {
    <upstream:UpstreamKeyword?> <fundamental:FundamentalKeyword?> "struct" <n:Id><p:Angle<ParameterKind>>
        <w:QuantifiedWhereClauses> "{" <f:Fields> "}" => StructDefn
    {
        name: n,
        parameter_kinds: p,
        where_clauses: w,
        fields: f,
        flags: StructFlags {
            upstream: upstream.is_some(),
            fundamental: fundamental.is_some(),
        },
    }
};

TraitDefn: TraitDefn = {
    <auto:AutoKeyword?> <marker:MarkerKeyword?> <upstream:UpstreamKeyword?> <fundamental:FundamentalKeyword?> <non_enumerable:NonEnumerableKeyword?> <coinductive:CoinductiveKeyword?> "trait" <n:Id><p:Angle<ParameterKind>>
        <w:QuantifiedWhereClauses> "{" <a:AssocTyDefn*> "}" => TraitDefn
    {
        name: n,
        parameter_kinds: p,
        where_clauses: w,
        assoc_ty_defns: a,
        flags: TraitFlags {
            auto: auto.is_some(),
            marker: marker.is_some(),
            upstream: upstream.is_some(),
            fundamental: fundamental.is_some(),
            non_enumerable: non_enumerable.is_some(),
            coinductive: coinductive.is_some(),
        },
    }
};

AssocTyDefn: AssocTyDefn = {
    "type" <name:Id> <p:Angle<ParameterKind>> <b:(":" <Plus<QuantifiedInlineBound>>)?>
        <w:QuantifiedWhereClauses> ";" =>
    {
        AssocTyDefn {
            name: name,
            parameter_kinds: p,
            where_clauses: w,
            bounds: b.unwrap_or(vec![]),
        }
    }
};

InlineBound: InlineBound = {
    TraitBound => InlineBound::TraitBound(<>),
    ProjectionEqBound => InlineBound::ProjectionEqBound(<>),
};

TraitBound: TraitBound = {
    <t:Id> <a:Angle<Parameter>> => {
        TraitBound {
            trait_name: t,
            args_no_self: a,
        }
    }
};

ProjectionEqBound: ProjectionEqBound = {
    <t:Id> "<" <a:(<Comma<Parameter>> ",")?> <name:Id> <a2:Angle<Parameter>>
        "=" <ty:Ty> ">" => ProjectionEqBound
    {
        trait_bound: TraitBound {
            trait_name: t,
            args_no_self: a.unwrap_or(vec![]),
        },
        name,
        args: a2,
        value: ty,
    }
};

QuantifiedInlineBound: QuantifiedInlineBound = {
    <b:InlineBound> => QuantifiedInlineBound {
        parameter_kinds: vec![],
        bound: b,
    },

    "forall" "<" <pk:Comma<ParameterKind>> ">" <b:InlineBound> => QuantifiedInlineBound {
        parameter_kinds: pk,
        bound: b,
    },
};

Impl: Impl = {
    <external:UpstreamKeyword?> "impl" <p:Angle<ParameterKind>> <mark:"!"?> <t:Id> <a:Angle<Parameter>> "for" <s:Ty>
        <w:QuantifiedWhereClauses> "{" <assoc:AssocTyValue*> "}" =>
    {
        let mut args = vec![Parameter::Ty(s)];
        args.extend(a);
        Impl {
            parameter_kinds: p,
            polarity: Polarity::from_bool(mark.is_none()),
            trait_ref: TraitRef {
                trait_name: t,
                args: args,
            },
            where_clauses: w,
            assoc_ty_values: assoc,
            impl_type: external.map(|_| ImplType::External).unwrap_or(ImplType::Local),
        }
    },
};

ParameterKind: ParameterKind = {
    Id => ParameterKind::Ty(<>),
    LifetimeId => ParameterKind::Lifetime(<>),
};

AssocTyValue: AssocTyValue = {
    <default:"default"?> "type" <n:Id> <a:Angle<ParameterKind>> "=" <v:Ty> ";" => AssocTyValue {
        name: n,
        parameter_kinds: a,
        value: v,
        default: default.is_some(),
    },
};

pub Ty: Ty = {
    "for" "<" <l:Comma<LifetimeId>> ">" <t:Ty> => Ty::ForAll {
        lifetime_names: l,
        ty: Box::new(t)
    },
    TyWithoutFor,
};

TyWithoutFor: Ty = {
    <n:Id> => Ty::Id { name: n},
    "dyn" <b:Plus<QuantifiedInlineBound>> => Ty::Dyn {
        bounds: b,
    },
    "impl" <b:Plus<QuantifiedInlineBound>> => Ty::Opaque {
        bounds: b,
    },
    <n:Id> "<" <a:Comma<Parameter>> ">" => Ty::Apply { name: n, args: a },
    <p:ProjectionTy> => Ty::Projection { proj: p },
    "(" <Ty> ")",
};

Lifetime: Lifetime = {
    <n:LifetimeId> => Lifetime::Id { name: n },
};

Parameter: Parameter = {
    Ty => Parameter::Ty(<>),
    Lifetime => Parameter::Lifetime(<>),
};

ProjectionTy: ProjectionTy = {
    "<" <t:TraitRef<"as">> ">" "::" <n:Id> <a:Angle<Parameter>> => ProjectionTy {
        trait_ref: t, name: n, args: a
    },
};

Fields: Vec<Field> = {
    <Comma<Field>>,
};

Field: Field = {
    <n:Id> ":" <t: Ty> => Field {
        name: n,
        ty: t,
    }
};

Clause: Clause = {
    "forall" <pk:Angle<ParameterKind>> "{" <dg:DomainGoal> "if" <g:Comma<Goal1>> "}" => Clause {
        parameter_kinds: pk,
        consequence: dg,
        conditions: g,
    },

    "forall" <pk:Angle<ParameterKind>> "{" <dg:DomainGoal> "}" => Clause {
        parameter_kinds: pk,
        consequence: dg,
        conditions: vec![],
    },
};

InlineClause1: Clause = {
    <dg:DomainGoal> => Clause {
        parameter_kinds: vec![],
        consequence: dg,
        conditions: vec![],
    },

    <dg:DomainGoal> ":" "-" <g:Comma<Goal1>> => Clause {
        parameter_kinds: vec![],
        consequence: dg,
        conditions: g,
    },
};

InlineClause: Clause = {
    <InlineClause1>,

    "forall" "<" <pk:Comma<ParameterKind>> ">" "{" <c:InlineClause1> "}" => Clause {
        parameter_kinds: pk,
        consequence: c.consequence,
        conditions: c.conditions,
    }
};

WhereClause: WhereClause = {
    <t:TraitRef<":">> => WhereClause::Implemented { trait_ref: t },

    // `T: Foo<U = Bar>` -- projection equality
    <s:Ty> ":" <t:Id> "<" <a:(<Comma<Parameter>> ",")?> <name:Id> <a2:Angle<Parameter>>
        "=" <ty:Ty> ">" =>
    {
        let mut args = vec![Parameter::Ty(s)];
        if let Some(a) = a { args.extend(a); }
        let trait_ref = TraitRef { trait_name: t, args: args };
        let projection = ProjectionTy { trait_ref, name, args: a2 };
        WhereClause::ProjectionEq { projection, ty }
    },
};

QuantifiedWhereClause: QuantifiedWhereClause = {
    <wc:WhereClause> => QuantifiedWhereClause {
        parameter_kinds: vec![],
        where_clause: wc,
    },

    "forall" "<" <pk:Comma<ParameterKind>> ">" <wc:WhereClause> => QuantifiedWhereClause {
        parameter_kinds: pk,
        where_clause: wc,
    },
};

QuantifiedWhereClauses: Vec<QuantifiedWhereClause> = {
    "where" <Comma<QuantifiedWhereClause>>,
    () => vec![],
};

DomainGoal: DomainGoal = {
    <wc: WhereClause> => DomainGoal::Holds { where_clause: wc },

    "WellFormed" "(" <t:Ty> ")" => DomainGoal::TyWellFormed { ty: t },

    "WellFormed" "(" <t:TraitRef<":">> ")" => DomainGoal::TraitRefWellFormed { trait_ref: t },

    "FromEnv" "(" <t:Ty> ")" => DomainGoal::TyFromEnv { ty: t },

    "FromEnv" "(" <t:TraitRef<":">> ")" => DomainGoal::TraitRefFromEnv { trait_ref: t },

    // `<T as Foo>::U -> Bar` -- a normalization
    "Normalize" "(" <s:ProjectionTy> "->" <t:Ty> ")" => DomainGoal::Normalize { projection: s, ty: t },

    "IsLocal" "(" <ty:Ty> ")" => DomainGoal::IsLocal { ty },
    "IsUpstream" "(" <ty:Ty> ")" => DomainGoal::IsUpstream { ty },
    "IsFullyVisible" "(" <ty:Ty> ")" => DomainGoal::IsFullyVisible { ty },

    "LocalImplAllowed" "(" <trait_ref:TraitRef<":">> ")" => DomainGoal::LocalImplAllowed { trait_ref },

    "Compatible" => DomainGoal::Compatible,
    "DownstreamType" "(" <ty:Ty> ")" => DomainGoal::DownstreamType { ty },
};

LeafGoal: LeafGoal = {
    <dg: DomainGoal> => LeafGoal::DomainGoal { goal: dg },

    <a:Ty> "=" <b:Ty> => LeafGoal::UnifyTys { a, b },

    <a:Lifetime> "=" <b:Lifetime> => LeafGoal::UnifyLifetimes { a, b },
};

TraitRef<S>: TraitRef = {
    <s:Ty> S <t:Id> <a:Angle<Parameter>> => {
        let mut args = vec![Parameter::Ty(s)];
        args.extend(a);
        TraitRef {
            trait_name: t,
            args: args,
        }
    },
};

Separator<S, T>: Vec<T> = {
    Separator1<S, T>? => <>.unwrap_or(vec![])
};

Separator1<S, T>: Vec<T> = {
    <t:T> => vec![t],
    <v:Separator<S, T>> S <t:T> => {
        let mut v = v;
        v.push(t);
        v
    }
};

#[inline]
Comma<T>: Vec<T> = {
    <Separator<",", T>>
};

#[inline]
SemiColon<T>: Vec<T> = {
    <Separator<";", T>>
};

#[inline]
Plus<T>: Vec<T> = {
    <Separator<"+", T>>
};

Angle<T>: Vec<T> = {
    "<" <Comma<T>> ">",
    () => vec![],
};

Id: Identifier = {
    <l:@L> <s:r"([A-Za-z]|_)([A-Za-z0-9]|_)*"> <r:@R> => Identifier {
        str: DefaultAtom::from(s),
        span: Span::new(l, r),
    }
};

LifetimeId: Identifier = {
    <l:@L> <s:r"'([A-Za-z]|_)([A-Za-z0-9]|_)*"> <r:@R> => Identifier {
        str: DefaultAtom::from(s),
        span: Span::new(l, r),
    }
};
